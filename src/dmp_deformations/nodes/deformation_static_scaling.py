#!/usr/bin/env python
import numpy as np
import PyBSpline
import matplotlib.pyplot as plt
import math


###################################
# API for outside calls           #
###################################
def getStaticScaling(x,y):
    support_nodes = calculate_piecewise_constant_approx(x, y)
    return create_smooth_variance_curve(support_nodes, x, y)

################################################
# Calculates the score for a particular segment#
################################################
def score_segment(start,end,x,y):
    idx_start = np.searchsorted(x, start, side="left")
    idx_end = np.searchsorted(x, end, side="right")

    if(idx_start==idx_end):
        return np.inf

    mean = np.mean(y[idx_start:idx_end])
    max = np.max(y[idx_start:idx_end])

    # This will attempt to drive down the overall score, which
    # is easiest when the sections are evenly split
    score = (np.abs(max-mean))*np.power((end-start),1)
    return score

def score_set_of_supports(x,y,support_nodes):
    score = 0.0
    for ii in range(0,len(support_nodes)-1):
        #print(score_segment(support_nodes[ii],support_nodes[ii+1],x,y))
        score+=score_segment(support_nodes[ii],support_nodes[ii+1],x,y)
    return score


################################################
# Calculate piecewise constant approximation   #
################################################
def calculate_piecewise_constant_approx(x,y):

    support_nodes = np.array([0.0, 1.0])

    fxn_gain = 1.0
    gain_threshold = 0.05

    while(fxn_gain>gain_threshold):
        best_score = np.inf
        last_score = score_set_of_supports(x,y,support_nodes)
        best_node = -1.0

        for ii in np.arange(0,1,0.01):
            if ii not in support_nodes:
                support_nodes_temp = np.sort(np.append(support_nodes,ii))
                temp_score = score_set_of_supports(x,y,support_nodes_temp)

                #print("ii ",ii," ",temp_score)
                if(temp_score<best_score):
                    best_score = temp_score
                    best_node = ii

        print("BEST NODE: ",best_node," ",last_score-best_score)
        fxn_gain = last_score-best_score
        if(fxn_gain>gain_threshold):
            support_nodes = np.sort(np.append(support_nodes, best_node))

    print("SUPNODES:",support_nodes)
    return support_nodes

################################################
# Add smooth transitions to the support nodes  #
################################################
def create_smooth_variance_curve(support_nodes,x,y):
    output = np.zeros(np.size(y))
    for node_id in range(0, len(support_nodes) - 1):
        idx_start = np.searchsorted(x, support_nodes[node_id], side="left")
        idx_end = np.searchsorted(x, support_nodes[node_id + 1], side="right")
        max = np.max(y[idx_start:idx_end])

        output[idx_start:idx_end]=max

        if(node_id>0): # connect to previous
            transition_half_length = 0.00
            pre_transition = output[idx_start-1]
            transition = output[idx_start]
            time_tx = x[idx_start]

            # Set up a cubic polynomial for the interpolated values
            start_tx = np.searchsorted(x,time_tx-transition_half_length, side="left")
            end_tx = np.searchsorted(x, time_tx + transition_half_length, side="right")

            LHS=np.array([[1.0, start_tx, start_tx*start_tx, start_tx*start_tx*start_tx],
                      [0.0, 1.0, 2*start_tx, 3*start_tx*start_tx],
                      [1.0, end_tx, end_tx*end_tx, end_tx*end_tx*end_tx],
                      [0.0, 1.0, 2*end_tx, 3*end_tx*end_tx]])
            RHS = np.array([pre_transition, 0.0, transition, 0.0]).reshape((4,1))
            poly = np.linalg.solve(LHS,RHS)

            for ii in range(start_tx,end_tx):
                output[ii]=poly[0]+poly[1]*ii+poly[2]*ii*ii+poly[3]*ii*ii*ii

    return output

################################################
# Set up an example to test the scaling        #
################################################
def main():
    # # Plot 1
    # x = np.linspace(0,1,40)
    # y = np.array([0.91, 0.6, 0.7, 0.7, 0.83, 0.92, 0.42, 0.1, 0.8, 0.4,
    #               0.7, 0.9, 0.1, 0.8, 0.75, 0.46, 0.83, 0.4, 0.95, 0.85,
    #               0.5, 0.3, 0.1, 0.4, 0.32, 0.42, 0.15, 0.24, 0.35, 0.45,
    #               0.21, 0.16, 0.26, 0.35, 0.41, 0.06, 0.24, 0.01, 0.33, 0.38])

    # Plot 2
    x = np.linspace(0, 1.0)
    y = 0.3 * np.sin(30 * x) + 0.2 * np.sin(50 * x - np.pi / 6)
    y[0:15] += 2
    y[40:] += 1

    # # Plot 3
    # x = np.linspace(0, 1, 40)
    # y = np.array([0.4, 0.35, 0.2, 0.1, 0.34, 0.27, 0.15, 0.38, 0.4, 0.1,
    #               0.35, 0.17, 0.25, 0.75, 0.80, 0.75, 0.25, 0.1, 0.4, 0.31,
    #               0.4, 0.35, 0.2, 0.1, 0.34, 0.27, 0.15, 0.38, 0.4, 0.1,
    #               0.4, 0.35, 0.2, 0.1, 0.34, 0.27, 0.15, 0.38, 0.4, 0.1])

    # Plot 4 - real force variance data from eraser wiping
    # x = np.linspace(0,1,199)
    # y = np.sqrt(np.array([6.747283615016177, 7.232339501411629, 8.082689249814102, 8.891233161277691, 9.46633590541735,
    #               8.530487527199337, 5.684581458767814, 4.442920650236722, 5.069355407282715, 4.471254519714687,
    #               3.994041599342678, 3.497470877690367, 2.847738348853499, 2.7195217683680464, 2.8270482621572186,
    #               2.902888607536033, 3.187501967461967, 3.6100147246371335, 3.6687755867015457, 3.3875169439075563,
    #               2.8791154916601727, 2.457713567916587, 2.301288221025355, 2.5004246321555232, 2.7527717886375833,
    #               2.6415166751473786, 2.4302260793071273, 2.3220837822438187, 2.2185199014439116, 2.068367870745392,
    #               2.052153179812841, 2.219694719848755, 2.334806731669453, 2.4304726564672245, 2.602606251088901,
    #               2.799111480501866, 3.0984090500665844, 3.5884179991273686, 3.83998367423314, 3.8590179431897425,
    #               4.096621471634644, 4.366353999878428, 4.249074099572421, 3.8776982916113596, 4.074970097710618,
    #               4.595954955693107, 4.665312779698405, 4.615780713206397, 4.6989617995028485, 5.119280449883843,
    #               5.317498725681129, 4.953552222572823, 4.29050760219734, 4.371301819861945, 5.092303415028787,
    #               5.1436919411492825, 4.9372294494653195, 5.077503103657717, 5.226245973411952, 5.091513359160661,
    #               4.926273758881456, 4.9151535064909515, 5.212989273560411, 5.352317628714673, 4.6263279964929565,
    #               4.416636416797696, 4.826995704221569, 4.801443107575831, 4.68103725702274, 4.580151864497108,
    #               4.335102770312959, 4.2823999042249214, 4.237128808511945, 4.345566770200856, 4.683173363144457,
    #               4.8018092453137475, 4.817587972272552, 4.627303487903922, 4.326653140947357, 4.228257878081008,
    #               4.152520094161525, 4.012522168860383, 3.9329463957186888, 3.972487200482192, 3.8397672736528627,
    #               3.50423526278083, 3.1554207843174904, 3.0449524029719064, 3.1722449717845773, 3.187555006255952,
    #               3.051332979635339, 2.9695951874947775, 3.104857793380074, 2.9661093156154057, 2.599444656049039,
    #               2.7689099990251993, 3.1079681457019963, 3.2175003308020975, 3.13915131492571, 2.990865162112082,
    #               2.809182368445612, 2.8308645660003884, 2.7722355214488394, 2.6906898152131142, 2.712773052333294,
    #               2.907598651864276, 3.118564002340879, 2.267783301576401, 1.6557093685779283, 1.944525117993351,
    #               2.125672171706464, 2.2354711544027106, 2.5258810418631907, 2.293520619448333, 1.9155510288367914,
    #               1.749128579308098, 1.68604534421895, 2.0906649506260977, 2.9464418377140142, 2.280339124282445,
    #               1.3992197518807268, 1.077863618717081, 1.0110515783073264, 1.00970279137713, 0.8510017173862998,
    #               0.7599038059896258, 0.6482348721791641, 0.5408479054784006, 0.652478305427353, 0.6966139377837801,
    #               0.49551013555236306, 0.43235050806323344, 0.4748079325718983, 0.5110994504879418, 0.6078026412654347,
    #               0.6525862195053691, 0.5884467738382017, 0.519719003046459, 0.42239293876052225, 0.33889315764332034,
    #               0.3459595163400509, 0.37710458372873584, 0.5879050986382746, 0.7649867498764312, 0.7659583429564106,
    #               0.781792523391816, 0.6931041800697718, 0.5965770036222144, 0.5033784286145471, 0.5981588734360973,
    #               0.5901737941421039, 0.4031981993544842, 0.35303742129879384, 0.31658470850932036, 0.2720700562871399,
    #               0.2628939810981532, 0.269740724256241, 0.26663077541063435, 0.2402168822415495, 0.23936720963366223,
    #               0.21556640447891126, 0.16265850133938953, 0.14294460392943745, 0.09977407985923897,
    #               0.060082801947592857,
    #               0.04485945506594633, 0.05507823237007225, 0.053350479284883984, 0.04753493908307488,
    #               0.0528095987150577,
    #               0.0771863516828505, 0.11136829610687911, 0.11432940037993951, 0.10839054361460528,
    #               0.09165551506859543,
    #               0.05130273626542604, 0.07661164389518337, 0.13025762491752005, 0.1604615822650354,
    #               0.18829727324740494,
    #               0.2606772004852437, 0.41840091183265526, 0.5570284088452427, 0.8706557399318441, 1.1920979814620438,
    #               1.136848720063587, 1.3181619530388182, 1.767764158175978, 2.1948431385124554, 2.8252994490481327,
    #               3.4942248444072725, 3.9730845939333883, 5.091920890436793, 6.330518211373509, 7.057058775556062,
    #               7.859762927310861, 8.98734207608358, 9.53487334357498, 9.44124929074591]))

    # # Plot 5- real position data in free space
    # x = np.linspace(0,1,199)
    # y = np.array([0.015893814188558335, 0.016148322942430106, 0.016443542528619005, 0.0167245084022263,
    #               0.017033516598651686, 0.017357959981775466, 0.01769907067123062, 0.018054959580247325,
    #               0.01842195338485012,
    #               0.018797481869021797, 0.019179191562867518, 0.01956542640704847, 0.019954913387288376,
    #               0.020346429453290252,
    #               0.020738575579751995, 0.021129714024314742, 0.021518081364173845, 0.0219019400907798,
    #               0.022279739615313543,
    #               0.022650288375046283, 0.023012888657845173, 0.023367325771549385, 0.023713714123178353,
    #               0.02405221956680557,
    #               0.024382754113346648, 0.024704806801451124, 0.025017491903903868, 0.025319715465459552,
    #               0.02561036696034582,
    #               0.02588844146880243, 0.026152990511449314, 0.026402879109642268, 0.02663647990846531,
    #               0.02685146049294646,
    #               0.027044772096641814, 0.027212914559451396, 0.027352493236477503, 0.02746094216652204,
    #               0.02753717285162629,
    #               0.027581929837973352, 0.02759777976988653, 0.027588813963889347, 0.02756015992117994,
    #               0.02751732939642723,
    #               0.027465422310564716, 0.02740833792377813, 0.02734825415776104, 0.027285597626743284,
    #               0.027219541972497714,
    #               0.027148856776796924, 0.02707275278017311, 0.026991380296257337, 0.02690579657511357,
    #               0.02681746882685987,
    #               0.02672758813026356, 0.026636530832476513, 0.026543693538661265, 0.02644775458910963,
    #               0.026347210600800784,
    #               0.026240951513697715, 0.026128670394287467, 0.02601099479561076, 0.025889303574050577,
    #               0.025765291868145156,
    #               0.025640426755348528, 0.025515472078863132, 0.0253901987332068, 0.02526331997927187,
    #               0.02513263639699255,
    #               0.02499537762138726, 0.024848737431930727, 0.024690560577030656, 0.02452001362575435,
    #               0.024338002982836848,
    #               0.02414716480859861, 0.023951388876975295, 0.023755002047647713, 0.023561879918347628,
    #               0.023374779658953463,
    #               0.02319505617757279, 0.023022756718161327, 0.022857019464607373, 0.022696664266989686,
    #               0.022540814019040727,
    #               0.02238935136621325, 0.022243032908695365, 0.022103170106081618, 0.02197099401271466,
    #               0.02184703309189819,
    #               0.02173083253338523, 0.021621097627181524, 0.02151612628799116, 0.02141428442883527,
    #               0.021314313012295548,
    #               0.021215416040960656, 0.02111719853088614, 0.021019486925165507, 0.020922061613701203,
    #               0.020824383927804363,
    #               0.020725433237818103, 0.020623704087653183, 0.020517297460467383, 0.02040404754226386,
    #               0.02028170850779569,
    #               0.020148224471856508, 0.020002085373871187, 0.01984272413205883, 0.019670764199892457,
    #               0.019487957421100804,
    #               0.01929683291751783, 0.01910025566712647, 0.018901096250400044, 0.0187020663986712,
    #               0.0185055387289202,
    #               0.018313160764313323, 0.018125288921813774, 0.0179405667610811, 0.017755948059866102,
    #               0.017567259186787032,
    #               0.01737012506183198, 0.017160976252207524, 0.01693782530575985, 0.016700621237406,
    #               0.016451124791245518,
    #               0.01619236182338775, 0.01592777001267831, 0.015660322164085885, 0.015391959835862858,
    #               0.015123626073153382,
    #               0.014855869990214215, 0.014589635906094672, 0.014326764903587811, 0.014069920558064034,
    #               0.013821950355811664,
    #               0.013585049208070674, 0.013360066239894868, 0.013146061932237316, 0.012940147204211647,
    #               0.012737754635635324,
    #               0.012533421947186998, 0.012321946824837195, 0.012099583328737142, 0.011864839672039856,
    #               0.011618501663742176,
    #               0.011362958622991477, 0.011101290241521008, 0.010836552468160525, 0.010571420611192874,
    #               0.010308174284844486,
    #               0.010048927814725425, 0.009795876796271002, 0.009551428022270088, 0.00931824167544658,
    #               0.009099192130573749,
    #               0.008897221570668919, 0.00871515582608259, 0.00855560163823448, 0.008420952164469407,
    #               0.008313412462972906,
    #               0.008235001530779815, 0.008187492441832133, 0.008172249628603663, 0.008189923689704547,
    #               0.008239924911030682,
    #               0.00831967165614903, 0.008423884207774578, 0.008544412759487563, 0.008670888211625448,
    #               0.008792144208024821,
    #               0.008897964769392652, 0.008980514252251593, 0.00903493328166299, 0.009059111498264895,
    #               0.009052970265273599,
    #               0.009017565518767383, 0.008954171731045244, 0.008863586431303503, 0.008745725120900659,
    #               0.008599556137675919,
    #               0.008423441106082966, 0.008215960654315227, 0.00797708295178875, 0.007709394486686004,
    #               0.007419060342939644,
    #               0.007116246041608922, 0.006814683768297728, 0.0065301967087512324, 0.006278281205711984,
    #               0.006071319661618046,
    #               0.005916286755833248, 0.005813738923484912, 0.005758373707869902, 0.005740796329800044,
    #               0.005749637039179632,
    #               0.005773700244756725, 0.005802921037188954, 0.0058287009167340515, 0.005847563944017524,
    #               0.005847634152973821])

    plt.plot(x,y,color='blue')

    support_nodes = calculate_piecewise_constant_approx(x,y)
    output = create_smooth_variance_curve(support_nodes,x,y)

    plt.plot(x,output,color='orange')

    plt.show()

if __name__ == "__main__":
    main()




